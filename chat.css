:root {
    --bg-main: #171717;
    --bg-sidebar: #000000;
    --bg-element: #2a2a2e;
    --bg-history-item: #333333;
    --text-primary: #FFFFFF;
    --text-secondary: #b3b3b3;
    --text-icon: #e0e0e0;
    --border-color: #2a2a2e;
    --accent-red: #d32f2f;
    --accent-green: #1DB954;
    --thinking-active: #FFD700;
}
html.light-theme {
    --bg-main: #f5f5f5;
    --bg-sidebar: #ffffff;
    --bg-element: #e0e0e0;
    --bg-history-item: #ebebeb;
    --text-primary: #111111;
    --text-secondary: #555555;
    --text-icon: #333333;
    --border-color: #dcdcdc;
}
body, html { margin: 0; padding: 0; height: 100%; width: 100%; background-color: var(--bg-main); color: var(--text-primary); font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif; transition: background-color 0.3s; }
#chat-container { display: flex; flex-direction: column; height: 100%; max-width: 800px; margin: 0 auto; background-color: var(--bg-main); transition: background-color 0.3s; position: relative; overflow: hidden; }
#chat-header { display: flex; justify-content: space-between; align-items: center; padding: 10px 15px; background-color: var(--bg-main); border-bottom: 1px solid var(--border-color); }
#header-title { margin: 0; font-size: 1.2em; font-weight: 500; color: var(--text-secondary); }
.icon-btn { font-size: 1.5em; cursor: pointer; color: var(--text-icon); background: none; border: none; padding: 5px; }
.icon-btn svg { fill: var(--text-icon); }
#chat-log { flex-grow: 1; overflow-y: auto; padding: 20px 15px; display: flex; flex-direction: column; gap: 20px; }
.welcome-message { text-align: center; margin: auto; padding: 2rem; }
.welcome-message h1 { font-size: 2.2em; color: var(--text-primary); margin: 0 0 10px 0; font-weight: 600; }
.welcome-message p { font-size: 1em; color: var(--text-secondary); margin: 0; }
.message-wrapper { display: flex; flex-direction: column; }
.sender-user { align-items: flex-end; }
.sender-ai { align-items: flex-start; }
.message-bubble { max-width: 85%; padding: 12px 18px; border-radius: 20px; line-height: 1.5; word-wrap: break-word; background-color: var(--bg-element); color: var(--text-primary); }
#input-area { padding: 10px 15px; background-color: var(--bg-main); z-index: 10; }
.input-wrapper { display: flex; align-items: flex-end; gap: 10px; background-color: var(--bg-element); border-radius: 24px; padding: 12px; }
.input-main-content { flex-grow: 1; display: flex; flex-direction: column; }
#user-input { border: none; background: transparent; color: var(--text-primary); resize: none; font-size: 1.1em; line-height: 1.4; max-height: 150px; overflow-y: auto; padding: 5px; width: 100%; }
#user-input::placeholder { color: var(--text-secondary); }
#user-input:focus { outline: none; }
.input-meta { margin-top: 8px; }
.model-tag { display: inline-flex; align-items: center; gap: 8px; background-color: #4a4a4a; padding: 4px 10px; border-radius: 16px; }
.model-name { font-size: 0.9em; color: var(--text-secondary); font-weight: 500; }
#thinking-mode-btn { background: none; border: none; cursor: pointer; padding: 0; display: flex; align-items: center; justify-content: center; }
#thinking-mode-btn svg { transition: fill 0.2s; }
#thinking-mode-btn svg path { fill: var(--text-icon); }
#thinking-mode-btn.active svg path { fill: var(--thinking-active); }
#send-btn { background: var(--text-primary); border: none; border-radius: 50%; width: 44px; height: 44px; display: flex; align-items: center; justify-content: center; cursor: pointer; flex-shrink: 0; transition: background-color 0.2s; }
#send-btn:disabled { background-color: #555; cursor: not-allowed; }
#send-btn svg { fill: var(--bg-main); }
#sidebar { position: fixed; top: 0; left: 0; width: 280px; height: 100%; background-color: var(--bg-sidebar); z-index: 1000; transform: translateX(-100%); transition: transform 0.3s ease-in-out; display: flex; flex-direction: column; border: none; }
#sidebar.open { transform: translateX(0); }
.sidebar-header { display: flex; justify-content: space-between; align-items: center; padding: 10px 15px; border-bottom: 1px solid var(--border-color); }
.sidebar-btn { width: 100%; text-align: left; background: none; color: var(--text-primary); padding: 10px 15px; border-radius: 8px; cursor: pointer; display: flex; align-items: center; gap: 10px; font-size: 1em; }
.sidebar-btn.icon-btn { width: auto; border: none; }
.sidebar-btn:hover { background-color: var(--bg-element); }
#new-chat-btn { border: 1px solid var(--text-icon); color: var(--text-primary); }
#new-chat-btn svg { stroke: var(--text-primary); }
.chat-history-container { flex-grow: 1; overflow-y: auto; padding: 10px; }
.history-title { font-size: 0.8em; color: var(--text-secondary); text-transform: uppercase; padding: 10px 15px; }
#chat-history-list { list-style: none; padding: 0; margin: 0; }
.history-item { display: flex; align-items: center; padding: 12px 15px; border-radius: 8px; cursor: pointer; margin-bottom: 5px; background-color: var(--bg-history-item); }
.history-item:hover { background-color: #4f4f4f; }
.history-item.active { background-color: #5a5a5a; }
.history-item span { flex-grow: 1; white-space: nowrap; overflow: hidden; text-overflow: ellipsis; }
.history-item .actions { display: flex; gap: 10px; }
.history-item .actions button { display: flex; background: none; border: none; color: var(--text-icon); cursor: pointer; }
.history-item .actions button svg { stroke: var(--text-icon); }
.sidebar-footer { padding: 15px; border-top: 1px solid var(--border-color); }
#clear-all-btn { background-color: var(--bg-element); }
#clear-all-btn:hover { background-color: #444; }
.delete-icon { color: var(--accent-red); }
.theme-switcher { display: flex; justify-content: space-between; align-items: center; margin-top: 15px; padding: 5px; }
.theme-label { color: var(--text-secondary); }
.theme-toggle { display: none; }
.theme-toggle-label { display: flex; align-items: center; justify-content: space-around; position: relative; width: 70px; height: 30px; background-color: var(--bg-element); border-radius: 15px; cursor: pointer; }
.theme-toggle-label::before { content: ''; position: absolute; width: 24px; height: 24px; background-color: var(--accent-green); border-radius: 50%; top: 3px; left: 4px; transition: transform 0.3s ease; }
.theme-toggle:checked + .theme-toggle-label::before { transform: translateX(38px); }
.theme-icon { font-size: 1.2em; color: var(--text-icon); }
#overlay { position: fixed; top: 0; left: 0; width: 100%; height: 100%; background: rgba(0,0,0,0.7); z-index: 999; opacity: 0; pointer-events: none; transition: opacity 0.3s ease-in-out; }
#overlay.active { opacity: 1; pointer-events: auto; }
.loader { display: inline-block; width: 25px; height: 25px; border: 3px solid rgba(120,120,120,0.3); border-radius: 50%; border-top-color: var(--text-primary); animation: spin 1s ease-in-out infinite; }
@keyframes spin { to { transform: rotate(360deg); } }
.action-toolbar { display: flex; gap: 16px; margin-top: 12px; align-items: center; }
.action-btn { background: none; border: none; cursor: pointer; padding: 0; opacity: 0.8; transition: opacity 0.2s; }
.action-btn:hover { opacity: 1; }
.action-btn svg { fill: var(--text-icon); }
.action-btn.active svg { fill: var(--text-primary); }
.action-btn.hidden { display: none; }
#regenerate-popup { position: fixed; bottom: 95px; left: 50%; transform: translate(-50%, 200%); z-index: 20; transition: transform 0.4s cubic-bezier(0.175, 0.885, 0.32, 1.275); }
#regenerate-popup.show { transform: translate(-50%, 0); }
#regenerate-confirm-btn { background-color: var(--bg-element); color: var(--text-primary); border: 1px solid var(--border-color); border-radius: 12px; padding: 10px 20px; font-size: 1em; cursor: pointer; display: flex; align-items: center; gap: 8px; }
#regenerate-confirm-btn svg { fill: var(--text-primary); }
#feedback-toast { position: fixed; bottom: 0; left: 0; width: 100%; background-color: #FFFFFF; color: #111111; padding: 18px 25px; z-index: 2000; transform: translateY(100%); transition: transform 0.3s ease-out; display: flex; align-items: center; justify-content: space-between; box-shadow: 0 -2px 10px rgba(0,0,0,0.1); box-sizing: border-box; }
#feedback-toast.show { transform: translateY(0); }
#toast-close-btn { background: none; border: none; font-size: 1.8em; cursor: pointer; color: #333; line-height: 1; }```

**File 3: `chat_logic.js` (Final Version)**
```javascript
document.addEventListener('DOMContentLoaded', () => {
    const chatLog = document.getElementById('chat-log');
    const userInput = document.getElementById('user-input');
    const sendBtn = document.getElementById('send-btn');
    const sidebar = document.getElementById('sidebar');
    const overlay = document.getElementById('overlay');
    const openSidebarBtn = document.getElementById('sidebar-open-btn');
    const closeSidebarBtn = document.getElementById('sidebar-close-btn');
    const newChatBtn = document.getElementById('new-chat-btn');
    const historyList = document.getElementById('chat-history-list');
    const clearAllBtn = document.getElementById('clear-all-btn');
    const themeToggle = document.getElementById('theme-toggle');
    const thinkingModeBtn = document.getElementById('thinking-mode-btn');
    const headerNewChatBtn = document.getElementById('header-new-chat-btn');
    const regeneratePopup = document.getElementById('regenerate-popup');
    const regenerateConfirmBtn = document.getElementById('regenerate-confirm-btn');
    const feedbackToast = document.getElementById('feedback-toast');
    const feedbackMessage = document.getElementById('feedback-message');
    const toastCloseBtn = document.getElementById('toast-close-btn');

    let state = { activeChatId: null, chats: {}, isThinkingMode: false, lastUserQuery: null };

    const saveState = () => localStorage.setItem('neuronix_chat_state_final_v5', JSON.stringify(state));
    const loadState = () => {
        const saved = localStorage.getItem('neuronix_chat_state_final_v5');
        if (saved) {
            state = JSON.parse(saved);
        }
        if (!state.activeChatId || !state.chats[state.activeChatId]) {
            startNewChat(false);
        }
    };
    
    const renderWelcomeMessage = () => {
        chatLog.innerHTML = `<div class="welcome-message"><h1>Welcome to Synapse</h1><p>Interface with a singular intelligence core. Your session starts now.</p></div>`;
    };
    
    const renderChat = () => {
        chatLog.innerHTML = '';
        const activeChat = state.chats[state.activeChatId];
        if (activeChat && activeChat.messages.length > 0) {
            activeChat.messages.forEach(msg => appendMessage(msg.sender, msg.content, false));
            state.lastUserQuery = activeChat.messages.filter(m => m.sender === 'user').pop()?.content || null;
        } else {
            renderWelcomeMessage();
        }
    };

    const renderSidebar = () => {
        historyList.innerHTML = '';
        Object.values(state.chats).reverse().forEach(chat => {
            const li = document.createElement('li');
            li.className = `history-item ${chat.id === state.activeChatId ? 'active' : ''}`;
            li.dataset.id = chat.id;
            li.innerHTML = `<span>${chat.title}</span><div class="actions"><button class="icon-btn edit-btn" title="Rename"><svg xmlns="http://www.w3.org/2000/svg" width="18" height="18" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><path d="M17 3a2.828 2.828 0 1 1 4 4L7.5 20.5 2 22l1.5-5.5L17 3z"></path></svg></button><button class="icon-btn delete-btn" title="Delete"><svg xmlns="http://www.w3.org/2000/svg" width="18" height="18" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><polyline points="3 6 5 6 21 6"></polyline><path d="M19 6v14a2 2 0 0 1-2 2H7a2 2 0 0 1-2-2V6m3 0V4a2 2 0 0 1 2-2h4a2 2 0 0 1 2 2v2"></path></svg></button></div>`;
            li.onclick = () => switchChat(chat.id);
            li.querySelector('.edit-btn').onclick = (e) => { e.stopPropagation(); renameChat(chat.id); };
            li.querySelector('.delete-btn').onclick = (e) => { e.stopPropagation(); deleteChat(chat.id); };
            historyList.appendChild(li);
        });
    };
    
    const switchChat = (chatId) => { state.activeChatId = chatId; renderChat(); renderSidebar(); closeSidebar(); };
    const startNewChat = (shouldCloseSidebar = true) => {
        const newId = Date.now().toString();
        state.chats[newId] = { id: newId, title: 'New Conversation', messages: [] };
        switchChat(newId);
    };

    const renameChat = (chatId) => {
        const newTitle = prompt('Enter new conversation title:', state.chats[chatId].title);
        if (newTitle && newTitle.trim() !== '') {
            state.chats[chatId].title = newTitle.trim();
            saveState(); renderSidebar();
        }
    };

    const deleteChat = (chatId) => {
        if (!confirm('Are you sure you want to delete this chat?')) return;
        delete state.chats[chatId];
        if (state.activeChatId === chatId) {
            const remainingIds = Object.keys(state.chats);
            if (remainingIds.length > 0) { switchChat(remainingIds.reverse()[0]); }
            else { startNewChat(); return; }
        }
        saveState(); renderChat(); renderSidebar();
    };

    clearAllBtn.onclick = () => {
        if (!confirm('Are you sure you want to clear ALL chats?')) return;
        state.chats = {}; startNewChat();
    };
    
    function appendMessage(sender, message, save = true) {
        const wrapper = document.createElement('div');
        wrapper.className = `message-wrapper sender-${sender.toLowerCase()}`;
        const bubble = document.createElement('div');
        bubble.className = 'message-bubble';
        bubble.innerHTML = message;
        wrapper.appendChild(bubble);

        const isError = message.toLowerCase().startsWith('system error');
        if (sender === 'ai' && !isError) {
            const toolbar = createActionToolbar(message);
            wrapper.appendChild(toolbar);
        }
        
        if (save) {
            addMessageToHistory(sender, message);
        }

        chatLog.appendChild(wrapper);
        chatLog.scrollTop = chatLog.scrollHeight;
        return bubble;
    }

    function createActionToolbar(messageText) {
        const toolbar = document.createElement('div');
        toolbar.className = 'action-toolbar';
        const icons = {
            copy: `<svg height="18" viewBox="0 0 24 24" width="18"><path d="M16 1H4c-1.1 0-2 .9-2 2v14h2V3h12V1zm3 4H8c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h11c1.1 0 2-.9 2-2V7c0-1.1-.9-2-2-2zm0 16H8V7h11v14z"/></svg>`,
            like: `<svg height="18" viewBox="0 0 24 24" width="18"><path d="M1 21h4V9H1v12zm22-11c0-1.1-.9-2-2-2h-6.31l.95-4.57.03-.32c0-.41-.17-.79-.44-1.06L14.17 1 7.59 7.59C7.22 7.95 7 8.45 7 9v10c0 1.1.9 2 2 2h9c.83 0 1.54-.5 1.84-1.22l3.02-7.05c.09-.23.14-.47.14-.73v-2z"/></svg>`,
            like_filled: `<svg height="18" viewBox="0 0 24 24" width="18"><path d="M1 21h4V9H1v12zM23 10c0-1.1-.9-2-2-2h-6.31l.95-4.57.03-.32c0-.41-.17-.79-.44-1.06L14.17 1 7.58 7.59C7.22 7.95 7 8.45 7 9v10c0 1.1.9 2 2 2h9c.83 0 1.54-.5 1.84-1.22l3.02-7.05c.09-.23.14-.47.14-.73v-1.91l-.01-.01L23 10z"/></svg>`,
            dislike: `<svg height="18" viewBox="0 0 24 24" width="18"><path d="M15 3H6c-.83 0-1.54.5-1.84 1.22l-3.02 7.05c-.09.23-.14.47-.14.73v2c0 1.1.9 2 2 2h6.31l-.95 4.57-.03.32c0 .41.17.79.44 1.06L9.83 23l6.59-6.59c.36-.36.58-.86.58-1.41V5c0-1.1-.9-2-2-2zm4 0v12h4V3h-4z"/></svg>`,
            dislike_filled: `<svg height="18" viewBox="0 0 24 24" width="18"><path d="M15 3H6c-.83 0-1.54.5-1.84 1.22l-3.02 7.05c-.09.23-.14.47-.14.73v1.91l.01.01L1 14c0 1.1.9 2 2 2h6.31l-.95 4.57-.03.32c0 .41.17.79.44 1.06L9.83 23l6.59-6.59C16.78 16.05 17 15.55 17 15V5c0-1.1-.9-2-2-2zM19 3v12h4V3h-4z"/></svg>`,
            speak: `<svg height="18" viewBox="0 0 24 24" width="18"><path d="M3 9v6h4l5 5V4L7 9H3zm13.5 3c0-1.77-1.02-3.29-2.5-4.03v8.05c1.48-.73 2.5-2.25 2.5-4.02zM14 3.23v2.06c2.89.86 5 3.54 5 6.71s-2.11 5.85-5 6.71v2.06c4.01-.91 7-4.49 7-8.77s-2.99-7.86-7-8.77z"/></svg>`,
            regenerate: `<svg height="18" viewBox="0 0 24 24" width="18"><path d="M17.65 6.35C16.2 4.9 14.21 4 12 4c-4.42 0-7.99 3.58-7.99 8s3.57 8 7.99 8c3.73 0 6.84-2.55 7.73-6h-2.08c-.82 2.33-3.04 4-5.65 4-3.31 0-6-2.69-6-6s2.69-6 6-6c1.66 0 3.14.69 4.22 1.78L13 11h7V4l-2.35 2.35z"/></svg>`
        };
        const toolbar = document.createElement('div');
        toolbar.className = 'action-toolbar';
        const copyBtn = document.createElement('button');
        copyBtn.className = 'action-btn'; copyBtn.title = 'Copy'; copyBtn.innerHTML = icons.copy;
        copyBtn.onclick = () => { navigator.clipboard.writeText(messageText); showToast('Text copied to clipboard!'); };
        const likeBtn = document.createElement('button');
        likeBtn.className = 'action-btn'; likeBtn.title = 'Like'; likeBtn.innerHTML = icons.like;
        const dislikeBtn = document.createElement('button');
        dislikeBtn.className = 'action-btn'; dislikeBtn.title = 'Dislike'; dislikeBtn.innerHTML = icons.dislike;
        likeBtn.onclick = () => {
            likeBtn.classList.add('active'); likeBtn.innerHTML = icons.like_filled;
            dislikeBtn.classList.add('hidden'); showToast('Thank you for your feedback!');
        };
        dislikeBtn.onclick = () => {
            dislikeBtn.classList.add('active'); dislikeBtn.innerHTML = icons.dislike_filled;
            likeBtn.classList.add('hidden'); showToast('Thank you for your feedback!');
        };
        const speakBtn = document.createElement('button');
        speakBtn.className = 'action-btn'; speakBtn.title = 'Speak'; speakBtn.innerHTML = icons.speak;
        speakBtn.onclick = () => {
            const utterance = new SpeechSynthesisUtterance(messageText.replace(/<[^>]*>?/gm, ''));
            window.speechSynthesis.speak(utterance);
        };
        const regenBtn = document.createElement('button');
        regenBtn.className = 'action-btn'; regenBtn.title = 'Regenerate'; regenBtn.innerHTML = icons.regenerate;
        regenBtn.onclick = () => {
            regeneratePopup.classList.add('show');
            overlay.classList.add('active');
        };

        toolbar.append(copyBtn, likeBtn, dislikeBtn, speakBtn, regenBtn);
        return toolbar;
    }
    
    regenerateConfirmBtn.onclick = () => {
        regeneratePopup.classList.remove('show');
        overlay.classList.remove('active');
        if(state.lastUserQuery){
            regenerateResponse();
        }
    };
    
    async function regenerateResponse() {
        // ... (function logic remains the same)
    }

    async function transmitQuery() {
        // ... (function logic remains the same)
    }
    
    const addMessageToHistory = (sender, content) => {
        // ... (function logic remains the same)
    };

    let toastTimer;
    function showToast(message) {
        clearTimeout(toastTimer);
        feedbackMessage.textContent = message;
        feedbackToast.classList.add('show');
        toastTimer = setTimeout(() => { feedbackToast.classList.remove('show'); }, 3000);
    }
    toastCloseBtn.onclick = () => { clearTimeout(toastTimer); feedbackToast.classList.remove('show'); };
    const openSidebar = () => { sidebar.classList.add('open'); overlay.classList.add('active'); };
    const closeSidebar = () => { sidebar.classList.remove('open'); overlay.classList.remove('active'); };
    const applyTheme = (isLight) => {
        document.documentElement.className = isLight ? 'light-theme' : '';
        localStorage.setItem('neuronix_theme_light_final_v5', isLight);
        themeToggle.checked = isLight;
    };
    const toggleThinkingMode = () => {
        state.isThinkingMode = !state.isThinkingMode;
        thinkingModeBtn.classList.toggle('active', state.isThinki
